%% -*- mode:html -*-

@author Fred Youhanaie <fyrlang@anydata.co.uk>
@copyright 2019 Fred Youhanaie
@version 0.1.0

@doc

<h3>Introduction</h3>

<p>
  `etsmgr' is a simple application that can act as the `heir' for ETS
  tables owned by other applications/processes. This allows the table
  owners to crash and restart without loosing the data stored in the
  table.
</p>

<p>
  The implementation is inspired by the two blog posts from Steve
  Vinoski:
  </p>

<ul>
  <li>
    <a href="http://steve.vinoski.net/blog/2011/03/23/dont-lose-your-ets-tables/">
      Don't Lose Your ets Tables
    </a>
  </li>
  <li>
    <a href="http://steve.vinoski.net/blog/2013/05/08/implementation-of-dont-lose-your-ets-tables/">
      Implementation of “Don’t Lose Your ets Tables”
    </a>
  </li>
</ul>

<p>
    While adapting and embedding DeadZen's
    <a href="https://github.com/DeadZen/etsgive">
      implementation
    </a>
    as referenced in the second article, would have sufficed, it was
    felt that a more generic reusable approach would help future
    projects.
</p>

<h3>Operation</h3>

<p>
  `etsmgr' can manage multiple ETS tables for multiple client
  processes.
</p>

<p>
  Multiple instances of `etsmgr' can co-exist on the same node by
  starting the applications with unique instance names.
</p>

<p>
  An instance of `etsmgr' can run as a standalone application, or be
  embedded within the supervision tree of another application. The
  former allows a single server to look after tables belonging to
  independent applications, while the latter will let applications to
  have their own table manager.
</p>

<p>
  A client can request `etsmgr' to take an ETS table under management
  with the `new_table/3,4' or `add_table/2,3' calls. The client will
  then use `del_table/1,2' when table management is no longer
  required.
</p>

<p>
  Internally, the `etsmgr' server will maintain a directory of client
  pids and ETS table ids. We always use table ids, even for named ETS
  tables. The directory entries will be indexed by a unique name
  supplied by the client.
</p>

<p>
  If a client process with a table managed by `etsmgr'
  crashes/terminates, the table will not be lost. Once the client
  restarts, it can ask `etsmgr` for the ownership of the table.
</p>

<p>
  If `etsmgr' crashes, provided that the client has the `trap_exit'
  flag set, it will receive an `EXIT' message with the process id of
  `etsmgr'. This should trigger a mechanism in the client to
  reregister its ETS table(s) with the new instance of `etsmgr' as
  soon as the server restarts.
</p>

<p>
  If the client does not set the `trap_exit' flag, then it will
  terminate as soon as `etsmgr' terminates. However, this would be
  very unusual in an application that cares about resilience!
</p>

<p>
  It is up to the client software on how to wait and/or check for the
  recovery of `etsmgr'. A single helper function, `wait4etsmgr', has
  been provided for a very simple scenario.
</p>

<p>
  If a client terminates without deleting its ETS table(s), `etsmgr'
  will inherit the managed client table(s) and keep the data alive
  until the client restarts, or `etsmgr' itself terminates. Hence, it
  is important for the client to delete the ETS table(s) prior to
  <b>normal</b> termination.
</p>

<h4>Simple operation</h4>

<ol>
  <li>
    An application (the client) starts, we assume `etsmgr' is already
    running.
  </li>
  <li>
    The client calls `new_table', which
    <ul>
      <li>
	creates the table
      </li>
      <li>
	links to the client
      </li>
      <li>
	makes the client the owner
      </li>
      <li>
	makes `etsmgr' the heir
      </li>
      <li>
	returns the pid of the manager and the ETS table id
      </li>
    </ul>
  </li>
  <li>
    The client needs the manager's pid in case the manager crashes
  </li>
  <li>
    Note that the client will also receive an `ETS-TRANSFER' message.
  </li>
  <li>
    Once the client has finished, it calls `del_table', and deletes
    the table.
  </li>
</ol>

<h4>Client restart</h4>

<ol>
  <li>
    As with the simple case above, but at some point the client
    crashes, and in due course restarts.
  </li>
  <li>
    Following the client termination, `etsmgr' will receive the `EXIT'
    message and update its internal state for the table(s) owned by
    the client.
  </li>
  <li>
    The client restarts, and calls `new_table' for its table(s).
  </li>
  <li>
    `etsmgr' will see that the table entry already exists, and subject
    to some further checks, it will give the table to the client.
  </li>
  <li>
    `etsmgr' does not distinguish between a client that has recovered
    from a crash and a client that happens to have chosen the same
    table name as an existing application, hence the above checks to
    ensure there are no obvious conflicts.
  </li>
</ol>

<h4>`etsmgr' crashes</h4>


<ol>
  <li>
    As with the second case, but instead of the client it's the
    `etsmgr' server that crashes, and restarts.
  </li>
  <li>
    The client will receive an `EXIT' message, and should wait for the
    `etsmgr' server to come back up.
  </li>
  <li>
    Once `etsmgr' is back up, the client calls `add_table', so that
    `etsmgr' can continue managing the ETS table.
  </li>
</ol>

<h3>Structure</h3>

<p>
  The application consists of the following components
</p>

<table border="yes">
  <tr>
    <th align="left">Module</th><th align="left">Purpose</th>
  </tr>
  <tr>
    <td>`etsmgr'</td><td>client API module</td>
  </tr>
  <tr>
    <td>`etsmgr_app'</td><td>The main application for the standalone version</td>
  </tr>
  <tr>
    <td>`etsmgr_srv'</td><td>The main `gen_server' managing the ETS tables</td>
  </tr>
  <tr>
    <td>`etsmgr_sup'</td><td>The supervisor managing the `etsmgr_srv' server.</td>
  </tr>
</table>

<p>
  For standalone mode, all four components are used. It is just a
  matter of ensuring that the `etsmgr' application is started with or
  before the client application.
</p>

<p>
  For embedded mode, the main server, `etsmgr_srv', can be put under
  the supervision of the client application's supervisor. The
  embedding can be done with or without the `etsmgr_sup' supervisor.
</p>

<p>
  The client module, `etsmgr', is used in both modes to communicate
  with the table manager.
</p>

<h3>API</h3>

<p>
  The main component of `etsmgr' is the gen_server,
  `etsmgr_srv'. Below are the functions for accessing the services of
  the manager.  There are two variants of each function, one for the
  unnamed instance, and one for a named instance.
</p>

<h4>`etsmgr:new_table/3,4'</h4>

<p>
  This will create a new ETS table, and the manager will link to the
  client process. We expect this call when the client has started, or
  restarted following a crash. In the latter case we would expect the
  manager to be aware of the entry. On successful completion, the
  client will be the owner of the ETS table, and `etsmgr_srv' will be
  the heir.
</p>

<h4>`etsmgr:add_table/2,3'</h4>

<p>
  This is similar to `new_table', except it will not create a new ETS
  table, but start managing an existing ETS table. We expect this call
  when a client prefers to create the ETS table itself, or when the
  manager has crashed and restarted and the client is reestablishing
  the arrangement. On successful completion, the client will be the
  owner of the ETS table, and `etsmgr_srv' will be the heir.
</p>

<h4>`etsmgr:del_table/1,2'</h4>

<p>
  This call is used when the client no longer needs a table to be
  managed, such as prior to termination. It will be up to the client
  to delete the ETS table.
</p>

<h4>`etsmgr:wait4etsmgr/0,1'</h4>

<p>
  This is a helper function that can be used by the client to ensure
  `etsmgr' is up and running, either at start up or following the
  termination of `etsmgr'. The function will block until `etsmgr' is
  available.
</p>

<h4>`etsmgr:info/0,1'</h4>

<p>
  This will return the tables currently under management as a map of
  maps, or an empty map.
</p>
